{
    "patches": [
        {
            "label": "2025-09-24_03-51-50",
            "content": "@@ -0,0 +1,929 @@\n+class Animal:%0A    def __init__ (self, species: str, age: int, sound: str):%0A        self.species: str = species%0A        self.sound: str = sound%0A        self.age: int = 0%0A%0A    def ageBy(self, increment: int):%0A%0A        elif age == 4:%0A            print(%22warning: %7Bspecies%7D morreu%22)%0A%0A    def makeSound(self):%0A%0A    def __str__(self) -%3E str:%0A        return f%22%7Bself.species%7D:%7Bself.age%7D:%7Bself.sound%7D%22%0A%0A%0Adef main():%0A    animal = Animal(%22%22, %22%22)%0A    while True:%0A        line: str = input()%0A        args: list%5Bstr%5D = line.split(%22 %22)%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22new%22:%0A            species = args%5B1%5D%0A            sound = args%5B2%5D%0A            animal = Animal(species, sound)%0A        elif args%5B0%5D == %22show%22:%0A            print(animal)%0A        elif args%5B0%5D == %22ageBy%22:%0A            increment: int = int(args%5B1%5D)%0A            animal.ageBy(increment)%0A        else:%0A            print(%22fail: comando inv%C3%A1lido%22)%0A%0A%0A\n",
            "lines": "37"
        },
        {
            "label": "2025-09-24_03-51-50",
            "content": "@@ -1,275 +0,0 @@\n-print('minha toalha %C3%A9 amarela')%0A%0Aclass Towel:%0A    def __init__(self, color): #construtor%0A        self.color = 'yellow' #atributos%0A        self.size = 'm'%0A        self.wetness = 0%0A%0A#referencia%0Atowel = Towel() #objetos%0A%0Aprint(towel.color)%0Aprint(towel.size)%0Aprint(towel.wetness)\n",
            "lines": "0"
        },
        {
            "label": "2025-09-24_03-51-50",
            "content": "@@ -1,15 +1,47 @@\n+print('minha toalha %C3%A9 amarela')%0A%0A\n class \n-Anima\n+Towe\n l:%0A \n@@ -59,185 +59,99 @@\n it__\n- \n (self, \n-species: str, age: int, sound: str):%0A        self.species: str = species%0A        self.sound: str = sound%0A        self.age: int = 0%0A%0A    def ageBy(self, increment: int):%0A\n+color): #construtor%0A        self.color = 'yellow' #atributos%0A        self.size = 'm'\n %0A   \n@@ -159,717 +159,117 @@\n     \n+s\n el\n-if age == 4:%0A            print(%22warning: %7Bspecies%7D morreu%22)%0A%0A    def makeSound(self):%0A%0A    def __str__(self) -%3E str:%0A        return f%22%7Bself.species%7D:%7Bself.age%7D:%7Bself.sound%7D%22%0A%0A%0Adef main():%0A    animal = Animal(%22%22, %22%22)%0A    while True:%0A        line: str = input()%0A        args: list%5Bstr%5D = line.split(%22 %22)%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22new%22:%0A            species = args%5B1%5D%0A            sound = args%5B2%5D%0A            animal = Animal(species, sound)%0A        elif args%5B0%5D == %22show%22:%0A            print(animal)%0A        elif args%5B0%5D == %22ageBy%22:%0A            increment: int = int(args%5B1%5D)%0A            animal.ageBy(increment)%0A        else:%0A            print(%22fail: comando inv%C3%A1lido%22)%0A%0A%0A\n+f.wetness = 0%0A%0A#referencia%0Atowel = Towel() #objetos%0A%0Aprint(towel.color)%0Aprint(towel.size)%0Aprint(towel.wetness)\n",
            "lines": "14"
        },
        {
            "label": "2025-09-24_03-51-57",
            "content": "@@ -0,0 +1,929 @@\n+class Animal:%0A    def __init__ (self, species: str, age: int, sound: str):%0A        self.species: str = species%0A        self.sound: str = sound%0A        self.age: int = 0%0A%0A    def ageBy(self, increment: int):%0A%0A        elif age == 4:%0A            print(%22warning: %7Bspecies%7D morreu%22)%0A%0A    def makeSound(self):%0A%0A    def __str__(self) -%3E str:%0A        return f%22%7Bself.species%7D:%7Bself.age%7D:%7Bself.sound%7D%22%0A%0A%0Adef main():%0A    animal = Animal(%22%22, %22%22)%0A    while True:%0A        line: str = input()%0A        args: list%5Bstr%5D = line.split(%22 %22)%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22new%22:%0A            species = args%5B1%5D%0A            sound = args%5B2%5D%0A            animal = Animal(species, sound)%0A        elif args%5B0%5D == %22show%22:%0A            print(animal)%0A        elif args%5B0%5D == %22ageBy%22:%0A            increment: int = int(args%5B1%5D)%0A            animal.ageBy(increment)%0A        else:%0A            print(%22fail: comando inv%C3%A1lido%22)%0A%0A%0A\n",
            "lines": "37"
        },
        {
            "label": "2025-09-24_03-51-57",
            "content": "@@ -1,275 +0,0 @@\n-print('minha toalha %C3%A9 amarela')%0A%0Aclass Towel:%0A    def __init__(self, color): #construtor%0A        self.color = 'yellow' #atributos%0A        self.size = 'm'%0A        self.wetness = 0%0A%0A#referencia%0Atowel = Towel() #objetos%0A%0Aprint(towel.color)%0Aprint(towel.size)%0Aprint(towel.wetness)\n",
            "lines": "0"
        },
        {
            "label": "2025-09-24_03-51-57",
            "content": "@@ -1,15 +1,47 @@\n+print('minha toalha %C3%A9 amarela')%0A%0A\n class \n-Anima\n+Towe\n l:%0A \n@@ -59,219 +59,84 @@\n it__\n- \n (self, \n-species: str, sound: str):%0A        self.species: str = species%0A        self.sound: str = sound%0A        self.age: int = 0%0A%0A    def ageBy(self, increment: int) -%3E None:%0A        if self.age %3C 4:%0A   \n+color): #construtor%0A        self.color = 'yellow' #atributos%0A\n         \n  sel\n@@ -135,121 +135,23 @@\n     \n- \n self.\n-age += increment%0A            if self.age %3E 4:%0A                self.age = 4%0A%0A    def makeSound(self) -%3E str:\n+size = 'm'\n %0A   \n@@ -159,1005 +159,117 @@\n     \n-if \n self.\n-age == 0:%0A            print(%22---%22)%0A        if self.age == 4:%0A            print(%22RIP%22)%0A        if self.age == 1 or self.age == 2 or self.age == 3:%0A            print(self.sound)%0A%0A    def __str__(self) -%3E str:%0A        return f%22%7Bself.species%7D:%7Bself.age%7D:%7Bself.sound%7D%22%0A%0A%0Adef main():%0A    animal = Animal(%22%22, %22%22)%0A    while True:%0A        line: str = input()%0A        print(%22$%22 + line) # eco%0A        args: list%5Bstr%5D = line.split(%22 %22)%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22init%22:%0A            species = args%5B1%5D%0A            sound = args%5B2%5D%0A            animal = Animal(species, sound)%0A        elif args%5B0%5D == %22show%22:%0A            print(animal)%0A        elif args%5B0%5D == %22grow%22:%0A            increment: int = int(args%5B1%5D)%0A            animal.ageBy(increment)%0A            if animal.age == 4:%0A                print(f%22warning: %7Banimal.species%7D morreu%22)%0A        elif args%5B0%5D == %22noise%22:%0A            animal.makeSound()%0A        else:%0A            print(%22fail: comando inv%C3%A1lido%22)%0A%0Amain(\n+wetness = 0%0A%0A#referencia%0Atowel = Towel() #objetos%0A%0Aprint(towel.color)%0Aprint(towel.size)%0Aprint(towel.wetness\n )\n",
            "lines": "14"
        },
        {
            "label": "2025-09-29_19-34-12",
            "content": "@@ -0,0 +1,1364 @@\n+class Animal:%0A    def __init__ (self, species: str, sound: str):%0A        self.species: str = species%0A        self.sound: str = sound%0A        self.age: int = 0%0A%0A    def ageBy(self, increment: int) -%3E None:%0A        if self.age %3C 4:%0A            self.age += increment%0A            if self.age %3E 4:%0A                self.age = 4%0A%0A    def makeSound(self) -%3E str:%0A        if self.age == 0:%0A            print(%22---%22)%0A        if self.age == 4:%0A            print(%22RIP%22)%0A        if self.age == 1 or self.age == 2 or self.age == 3:%0A            print(self.sound)%0A%0A    def __str__(self) -%3E str:%0A        return f%22%7Bself.species%7D:%7Bself.age%7D:%7Bself.sound%7D%22%0A%0A%0Adef main():%0A    animal = Animal(%22%22, %22%22)%0A    while True:%0A        line: str = input()%0A        print(%22$%22 + line) # eco%0A        args: list%5Bstr%5D = line.split(%22 %22)%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22init%22:%0A            species = args%5B1%5D%0A            sound = args%5B2%5D%0A            animal = Animal(species, sound)%0A        elif args%5B0%5D == %22show%22:%0A            print(animal)%0A        elif args%5B0%5D == %22grow%22:%0A            increment: int = int(args%5B1%5D)%0A            animal.ageBy(increment)%0A            if animal.age == 4:%0A                print(f%22warning: %7Banimal.species%7D morreu%22)%0A        elif args%5B0%5D == %22noise%22:%0A            animal.makeSound()%0A        else:%0A            print(%22fail: comando inv%C3%A1lido%22)%0A%0Amain()\n",
            "lines": "49"
        },
        {
            "label": "2025-09-29_19-34-12",
            "content": "@@ -1,1839 +0,0 @@\n-class Carro:%0A    def __init__(self, pas: int, gas: int, km: int):%0A        self.pas = 0%0A        self.gas = 0%0A        self.km = 0%0A%0A    def passMax(self, increment: int) -%3E None:%0A        self.pas += increment%0A        if self.pas %3E 2:%0A            self.pas = 2%0A            print(f%22fail: limite de pessoas atingido%22)%0A        if self.pas %3C 0:%0A            self.pas = 0%0A            print(f%22fail: nao ha ninguem no carro%22)%0A%0A    def gasMax(self, increment: int) -%3E None:%0A        if self.gas %3C 100:%0A            self.gas += increment%0A        if self.gas %3E 100:%0A            self.gas = 100%0A            #print(%22%22)%0A%0A%0A    def __str__(self) -%3E str:%0A        return f%22pass: %7Bself.pas%7D, gas: %7Bself.gas%7D, km: %7Bself.km%7D%22%0A%0Adef main():%0A    carro = Carro(%22%22, %22%22, %22%22)%0A    while True:%0A        line: str = input()%0A        print(%22$%22 + line)%0A        args: list%5Bstr%5D = line.split(%22 %22)%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22show%22:%0A            print(carro)%0A        elif args%5B0%5D == %22enter%22:%0A            carro.passMax(1)%0A        elif args%5B0%5D == %22leave%22:%0A            carro.passMax(-1)%0A        elif args%5B0%5D == %22fuel%22:%0A            increment: int = int(args%5B1%5D)%0A            carro.gasMax(increment)%0A        elif args%5B0%5D == %22drive%22:%0A            dist = int(args%5B1%5D)%0A            if carro.pas == 0:%0A                print(f%22fail: nao ha ninguem no carro%22)%0A            elif carro.gas == 0:%0A                print(f%22fail: tanque vazio%22)%0A            else:%0A                if carro.gas %3C dist:%0A                    carro.km += carro.gas%0A                    percorrido = carro.gas%0A                    carro.gas = 0%0A                    print(f%22fail: tanque vazio apos andar %7Bpercorrido%7D%22 + %22 km%22)%0A                else:%0A                    carro.km += dist%0A                    carro.gas -= dist%0A        else:%0A            print(%22fail: comando invalido%22)%0Amain()%0A%0A\n",
            "lines": "0"
        },
        {
            "label": "2025-09-29_19-34-12",
            "content": "@@ -3,15 +3,14 @@\n ass \n-Towel:%0A\n+Carro:\n %0A   \n@@ -26,101 +26,86 @@\n it__\n- \n (self, \n-color: str, size: str):%0A        self.color: str = color%0A        self.size: str = size\n+pas: int, gas: int, km: int):%0A        self.pas = 0%0A        self.gas = 0\n %0A   \n@@ -118,20 +118,10 @@\n elf.\n-wetness: int\n+km\n  = 0\n@@ -134,22 +134,29 @@\n def \n-dry(self, amou\n+passMax(self, increme\n nt: \n@@ -186,23 +186,22 @@\n elf.\n-wetness += amou\n+pas += increme\n nt%0A \n@@ -219,248 +219,198 @@\n elf.\n-wetness %3E= self.getMaxWetness():%0A            print('toalha encharcada')%0A            self.wetness = self.getMaxWetness()%0A%0A    def isDry(self) -%3E bool:%0A        return self.wetnes\n+pas %3E 2:%0A            self.pas = 2%0A            print(f%22fail: limite de pessoas atingido%22)%0A        if self.pas %3C 0:%0A            self.pa\n s =\n-=\n  0%0A\n-%0A\n     \n-def wringOut(self) -%3E None:%0A        self.wetness = 0\n+        print(f%22fail: nao ha ninguem no carro%22)\n %0A%0A  \n@@ -420,33 +420,43 @@\n ef g\n-etMaxWetness(self\n+asMax(self, increment: int\n ) -%3E \n-int\n+None\n :%0A  \n@@ -473,19 +473,17 @@\n elf.\n-size == %22P%22\n+gas %3C 100\n :%0A  \n@@ -496,17 +496,29 @@\n     \n-return 10\n+self.gas += increment\n %0A   \n@@ -534,19 +534,17 @@\n elf.\n-size == %22M%22\n+gas %3E 100\n :%0A  \n@@ -557,85 +557,46 @@\n     \n-return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0\n+self.gas = 100%0A            #print(%22%22)%0A\n %0A%0A  \n@@ -608,17 +608,16 @@\n  __str__\n- \n (self) -\n@@ -644,19 +644,20 @@\n n f%22\n-Cor\n+pass\n : %7Bself.\n colo\n@@ -656,53 +656,41 @@\n elf.\n-color%7D, Tamanho: %7Bself.size%7D, Umidade\n+pas%7D, gas: %7Bself.gas%7D, km\n : %7Bself.\n wetn\n@@ -689,20 +689,14 @@\n elf.\n-wetness\n+km\n %7D%22%0A%0A\n-%0A\n def \n@@ -707,31 +707,34 @@\n ():%0A    \n-toalha = Towel(\n+carro = Carro(%22%22, \n %22%22, %22%22)%0A\n@@ -790,17 +790,16 @@\n    print\n- \n (%22$%22 + l\n@@ -921,13 +921,12 @@\n == %22\n-criar\n+show\n %22:%0A \n@@ -940,89 +940,81 @@\n     \n-color = args%5B1%5D%0A            size = args%5B2%5D%0A            toalha = Towel(color, size\n+print(carro)%0A        elif args%5B0%5D == %22enter%22:%0A            carro.passMax(1\n )%0A  \n@@ -1040,15 +1040,13 @@\n == %22\n-mostrar\n+leave\n %22:%0A \n@@ -1060,20 +1060,24 @@\n     \n-print(toalha\n+carro.passMax(-1\n )%0A  \n@@ -1103,15 +1103,12 @@\n == %22\n-enxugar\n+fuel\n %22:%0A \n@@ -1118,20 +1118,23 @@\n         \n-amou\n+increme\n nt: int \n@@ -1164,23 +1164,28 @@\n     \n-toalha.dry(amou\n+carro.gasMax(increme\n nt)%0A\n@@ -1213,12 +1213,13 @@\n == %22\n-seca\n+drive\n %22:%0A \n@@ -1233,113 +1233,544 @@\n     \n-print('sim' if toalha.isDry() else 'nao')%0A        el\n+dist = int(args%5B1%5D)%0A            if carro.pas == 0:%0A                print(f%22fail: nao ha ninguem no carro%22)%0A            elif carro.gas == 0:%0A                print(f%22fail: tanque vazio%22)%0A            else:%0A                \n if \n+c\n ar\n-gs%5B0%5D == %22torcer%22:%0A            toalha.wringOut()\n+ro.gas %3C dist:%0A                    carro.km += carro.gas%0A                    percorrido = carro.gas%0A                    carro.gas = 0%0A                    print(f%22fail: tanque vazio apos andar %7Bpercorrido%7D%22 + %22 km%22)%0A                else:%0A                    carro.km += dist%0A                    carro.gas -= dist\n %0A   \n@@ -1828,13 +1828,12 @@\n o%22)%0A\n-%0A%0A%0A\n main()\n+%0A%0A\n",
            "lines": "62"
        },
        {
            "label": "2025-09-29_19-34-12",
            "content": "@@ -1,407 +1,1517 @@\n-%0A'Essa pratica permitiu que possamos conhecer as principais funcionalidades do git'%0A'uma ferramenta essencial e bastante usada no contexto da programa%C3%A7%C3%A3o.'%0A'Tambem come%C3%A7amos a migrar para o vs code local, n%C3%A3o muito explorado em FUP.'%0A'A maior dificuldade encontrada por mim foram sequencias de complica%C3%A7%C3%B5es e'%0A'erros que tive ao configurar o git local e fazer commits para o repositorio remoto.'%0A%0Aprint('1'\n+class Towel:%0A%0A    def __init__ (self, color: str, size: str):%0A        self.color: str = color%0A        self.size: str = size%0A        self.wetness: int = 0%0A%0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E= self.getMaxWetness():%0A            print('toalha encharcada')%0A            self.wetness = self.getMaxWetness()%0A%0A    def isDry(self) -%3E bool:%0A        return self.wetness == 0%0A%0A    def wringOut(self) -%3E None:%0A        self.wetness = 0%0A%0A    def getMaxWetness(self) -%3E int:%0A        if self.size == %22P%22:%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0%0A%0A    def __str__ (self) -%3E str:%0A        return f%22Cor: %7Bself.color%7D, Tamanho: %7Bself.size%7D, Umidade: %7Bself.wetness%7D%22%0A%0A%0Adef main():%0A    toalha = Towel(%22%22, %22%22)%0A    while True:%0A        line: str = input()%0A        print (%22$%22 + line)%0A        args: list%5Bstr%5D = line.split(%22 %22)%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22criar%22:%0A            color = args%5B1%5D%0A            size = args%5B2%5D%0A            toalha = Towel(color, size)%0A        elif args%5B0%5D == %22mostrar%22:%0A            print(toalha)%0A        elif args%5B0%5D == %22enxugar%22:%0A            amount: int = int(args%5B1%5D)%0A            toalha.dry(amount)%0A        elif args%5B0%5D == %22seca%22:%0A            print('sim' if toalha.isDry() else 'nao')%0A        elif args%5B0%5D == %22torcer%22:%0A            toalha.wringOut()%0A        else:%0A            print(%22fail: comando invalido%22)%0A%0A%0A%0Amain(\n )\n",
            "lines": "59"
        },
        {
            "label": "2025-09-29_19-34-12",
            "content": "@@ -1,3091 +1,407 @@\n-class Towel: #em algumas linguagens chanew mada de this%0A    def __init__(self, color: str, size: str): #construtor (ele cria os objetos da classe)%0A        self.color: str = color #atributos%0A        self.size: str = size%0A        self.wetness: int = 0%0A        # 'def' cria a fun%C3%A7%C3%A3o/m%C3%A9todo%0A        # self %C3%A9 o objeto que manipulamos%0A%0A# def s%C3%A3o metodos/fun%C3%A7%C3%B5es que d%C3%A3o certos comportamentos a class%0A    def dry(self, amount: int) -%3E None: # seca a toalha%0A        self.wetness += amount # aumenta a um\n+%0A'Essa pratica permitiu que possamos conhecer as principais funcional\n idade\n+s\n  d\n-a toalha%0A        if self.wetness %3E= self.getMaxWetness(): # indica que a quantidade de %C3%A1gua ultrapassa o m%C3%A1ximo que pode ser retido%0A            print('toalha encharcada')%0A            self.wetness = self.getMaxWetness() # limita o maximo de %C3%A1gua que a toalha pode reter%0A%0A%0A    def isDry(self) -%3E bool: # verifica se a toalha est%C3%A1 seca%0A        return self.wetness == 0%0A%0A    def wringOut(self) -%3E None:  # torce/enxuga a toalha%0A        self.wetness = 0 # n%C3%A3o utiliza return pois atribui um valor %C3%A0 variavel, e n%C3%A3o apenas retorna seu valor %0A    # wringOut tira a umidade/iguala a zero, isDry verifica se a umidade %C3%A9 zero%0A%0A%0A    def getMaxWetness(self) -%3E int: # identifica o quanto de liquido a toalha retem de acordo com tamanho%0A        if self.size == %22P%22:%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0 # caso o tamanho n%C3%A3o seja nenhum anterior, como 'GG' ou 'XG'%0A        # n%C3%A3o %C3%A9 preciso usar else, pois o return encerra esta fun%C3%A7%C3%A3o%0A%0A%0A    def __str__(self) -%3E str: #toString (converte um objeto em texto)%0A        return f%22Cor:%7Bself.color%7D, Tam:%7Bself.size%7D, Umidade:%7Bself.wetness%7D%22%0A%0A%0Adef main(): # 2. tranforma o c%C3%B3digo em algo interativo ao usu%C3%A1rio%0A    toalha = Towel(%22%22, %22%22) # 3. cria um objeto vazio/template, manipul%C3%A1vel%0A    while True: # 4. mantem o usu%C3%A1rio preso em um loop de i\n+o git'%0A'uma ferramenta essencial e bastante usada no contexto da programa%C3%A7%C3%A3o.'%0A'Tambem come%C3%A7amos a migrar para o vs code local, n%C3%A3o muito explorado em FUP.'%0A'A maior dificuldade enco\n nt\n-e\n ra\n-%C3%A7%C3%A3o, onde %C3%A9 dito como deseja manipular a 'toalha'%0A        line: str = input() # 5. o que o usu%C3%A1rio deseja fazer? quais dos\n+da por mim foram sequencias de\n  com\n-andos vai utilizar%0A        args: list%5Bstr%5D = line.split(%22 %22) # 6. lista palavras chaves das fun%C3%A7%C3%B5es que deseja rodar, line.split separa palavras de acordo com espa%C3%A7o%0A        if args%5B0%5D == %22end%22: # se usuario quer ir embora, ele recebe end%0A            break # sai do loop %0A        elif args%5B0%5D == %22new%22: # cria uma nova%0A            color = args%5B1%5D # cor pertence ao parametro 1%0A            size = args%5B2%5D # pertencente a posi%C3%A7%C3%A3o 2%0A            toalha = Towel(color, size) # preenche as duas informa%C3%A7%C3%B5es de um vez%0A        elif args%5B0%5D == %22show%22: # mostra o estado atual do objeto criado%0A            print(toalha) %0A        elif args%5B0%5D == %22dry%22: # chama a fun%C3%A7%C3%A3o dry%0A            amount: int = int(args%5B1%5D) # transforma o inteiro para entrar na lista de strings%0A            toalha.dry(amount) # indica quanto secar%0A        else:%0A            print(%22fail: comando inv%C3%A1lido%22) # 7. caso o comando seja qualquer outro n%C3%A3o existente%0A            %0A%0A%0Aif __name__ == %22__main__%22:%0Amain() # 1. chama a fun%C3%A7%C3%A3o main, sempre tem que estar no final do c%C3%B3digo%0A%0A# transformou um c%C3%B3digo linear em um iterativo\n+plica%C3%A7%C3%B5es e'%0A'erros que tive ao configurar o git local e fazer commits para o repositorio remoto.'%0A%0Aprint('1')\n",
            "lines": "8"
        },
        {
            "label": "2025-09-29_19-34-12",
            "content": "class Towel: #em algumas linguagens chanew mada de this\n    def __init__(self, color: str, size: str): #construtor (ele cria os objetos da classe)\n        self.color: str = color #atributos\n        self.size: str = size\n        self.wetness: int = 0\n        # 'def' cria a fun\u00e7\u00e3o/m\u00e9todo\n        # self \u00e9 o objeto que manipulamos\n\n# def s\u00e3o metodos/fun\u00e7\u00f5es que d\u00e3o certos comportamentos a class\n    def dry(self, amount: int) -> None: # seca a toalha\n        self.wetness += amount # aumenta a umidade da toalha\n        if self.wetness >= self.getMaxWetness(): # indica que a quantidade de \u00e1gua ultrapassa o m\u00e1ximo que pode ser retido\n            print('toalha encharcada')\n            self.wetness = self.getMaxWetness() # limita o maximo de \u00e1gua que a toalha pode reter\n\n\n    def isDry(self) -> bool: # verifica se a toalha est\u00e1 seca\n        return self.wetness == 0\n\n    def wringOut(self) -> None:  # torce/enxuga a toalha\n        self.wetness = 0 # n\u00e3o utiliza return pois atribui um valor \u00e0 variavel, e n\u00e3o apenas retorna seu valor \n    # wringOut tira a umidade/iguala a zero, isDry verifica se a umidade \u00e9 zero\n\n\n    def getMaxWetness(self) -> int: # identifica o quanto de liquido a toalha retem de acordo com tamanho\n        if self.size == \"P\":\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0 # caso o tamanho n\u00e3o seja nenhum anterior, como 'GG' ou 'XG'\n        # n\u00e3o \u00e9 preciso usar else, pois o return encerra esta fun\u00e7\u00e3o\n\n\n    def __str__(self) -> str: #toString (converte um objeto em texto)\n        return f\"Cor:{self.color}, Tam:{self.size}, Umidade:{self.wetness}\"\n\n\ndef main(): # 2. tranforma o c\u00f3digo em algo interativo ao usu\u00e1rio\n    toalha = Towel(\"\", \"\") # 3. cria um objeto vazio/template, manipul\u00e1vel\n    while True: # 4. mantem o usu\u00e1rio preso em um loop de intera\u00e7\u00e3o, onde \u00e9 dito como deseja manipular a 'toalha'\n        line: str = input() # 5. o que o usu\u00e1rio deseja fazer? quais dos comandos vai utilizar\n        args: list[str] = line.split(\" \") # 6. lista palavras chaves das fun\u00e7\u00f5es que deseja rodar, line.split separa palavras de acordo com espa\u00e7o\n        if args[0] == \"end\": # se usuario quer ir embora, ele recebe end\n            break # sai do loop \n        elif args[0] == \"new\": # cria uma nova\n            color = args[1] # cor pertence ao parametro 1\n            size = args[2] # pertencente a posi\u00e7\u00e3o 2\n            toalha = Towel(color, size) # preenche as duas informa\u00e7\u00f5es de um vez\n        elif args[0] == \"show\": # mostra o estado atual do objeto criado\n            print(toalha) \n        elif args[0] == \"dry\": # chama a fun\u00e7\u00e3o dry\n            amount: int = int(args[1]) # transforma o inteiro para entrar na lista de strings\n            toalha.dry(amount) # indica quanto secar\n        else:\n            print(\"fail: comando inv\u00e1lido\") # 7. caso o comando seja qualquer outro n\u00e3o existente\n            \n\n\nif __name__ == \"__main__\":\nmain() # 1. chama a fun\u00e7\u00e3o main, sempre tem que estar no final do c\u00f3digo\n\n# transformou um c\u00f3digo linear em um iterativo",
            "lines": "64"
        }
    ]
}